1. Основы

1.0) Введение

TeX и LaTeX произносятся как "тех" и "латех"(не "латекс"!)

Слова разделяются пробелами, а абзацы — пустыми строками.
Если пробелов больше одного, то они игнорируются(остаётся один пробел).
Конец строки также воспринимается как пробел.
Абзацный отступ в исходном тексте оставлять не надо: он получается автоматически.

1.1) Спецсимволы

1 2 3 4 5 6 7 8 9 10
{ } $ & # % _ ^ ~ \

Эти символы имеют особый статус; если вы употребите их в тексте "просто так", то
скорее всего получите сообщение об ошибке (и на печати не увидите того, что хотелось).

Печатное изображение знаков, соответствующих первым 7 из них, можно получить,
если в исходном тексте поставить перед соответствующим символом без пробела знак \
Например, 50\% = 0.5 (на выходе получим "50% = 0.5")

Если символ % употреблен в тексте не в составе комбинации \%,
то он является "символом комментария":
все символы, расположенные в строке после него (и сам %), TeX игнорирует

Фигурные скобки {} ограничивают группы в исходном файле.
Знак доллара $ ограничивает математические формулы.
Знаки _ и ^ используется в математических формулах.
Знак ~ обозначает "неразрывный пробел" между словами.
Со знака \ начинаются все TeX'овские команды.
Знаки # и & используются в более сложных конструкциях TeX'а.
Cимволы < > | в тексте употреблять можно (сообщения об ошибке это не вызовет),
но напечатается при этом нечто, совсем на эти символы не похожее.
Эти символы, так же как и символы = и + используются в математических формулах.

1.2) Команды

Команды всегда начинаются со знака \

Команды бывают двух видов

1) состоят из знака \ и одного символа после него, не являющегося буквой.
Именно к этому типу относятся команды \{, \}, ... , \%.
2) состоят из \ и последовательности букв,
называемой именем команды (имя может состоять и из одной буквы).

В именах команд прописные и строчные буквы различаются.
Например, \large, \Large и \LARGE — это три разные команды.

После команды первого типа (из \ и не-буквы) пробел в исходном
тексте ставится или не ставится в зависимости от того, что вы хотите получить на печати.

После команды из \ и букв в исходном тексте обязательно
должен стоять либо пробел, либо символ, не являющийся буквой.
(чтобы TeX мог определить, где заканчивается имя команды и начинается дальнейший текст)

Если после команды из \ и букв в исходном тексте
следуют пробелы, то при трансляции они игнорируются.
Если необходимо, чтобы TeX все-таки "увидел" пробел
после команды в исходном тексте, надо этот пробел специально организовать.
Один из возможных способов — поставить после команды
пару из открывающей и закрывающей фигурных скобок {} (так что TeX
будет знать, что имя команды кончилось), и уже после них сделать пробел, если нужно.
Иногда можно также поставить команду \ (backslash с пробелом после него), генерирующую пробел.

1.3) Структура исходного текста

\documentclass{article}
\begin{document}
Проба пера.
\end{document}

Стандартные классы документов:
-book     (книга)
-article  (статья)
-report   (что-то среднее между book и article)
-proc     (для оформления изданий типа "труды конференции")
-letter   (для оформления деловых писем так, как это принято в США)

1.4) Группы

Группы позволяют ограничить действие команды, таким образом чтобы она действовала только
на то, что находится внутри фигурных скобок(группы).

Например,

Полужирным шрифтом набрано только {\bfseries это}
слово; после скобок все идет, как прежде

Сами по себе фигурные скобки не генерируют никакого текста и не влияют на шрифт;
единственное, что они делают — это ограничивают группу внутри файла.
Как правило, задаваемые командами TeX’а изменения различных параметров
(в нашем случае — текущего шрифта) действуют в пределах той группы,
внутри которой была дана соответствующая команда; по окончании группы
(после закрывающей фигурной скобки, соответствующей той фигурной скобке, что открывала группу)
все эти изменения забываются и восстанавливается тот режим, который был до начала группы.

Группы могут быть вложены друг в дружку.

Некоторые команды, называемые глобальными,
сохраняют свое действие и за пределами той группы, где они были употреблены.

1.5) Команды с аргументами

Команды наподобие \LaTeX или, скажем, \bfseries действуют "сами по себе";
многим командам, однако, необходимо задать аргументы.

В LaTeX аргументы команд бывают обязательные и необязательные.

Обязательные аргументы задаются в фигурных скобках;
если для команды предусмотрено наличие обязательных аргументов,
она без них правильно работать не будет.

У многих команд предусмотрены также и необязательные аргументы:
они влияют на работу команды, коль скоро они указаны,
но их отсутствие не ведет к сообщению об ошибке.
Необязательные аргументы задаются в квадратных скобках.

В частности, у команды \documentclass предусмотрен обязательный
аргумент(класс документа) и необязательный: в квадратных
скобках перед обязательным аргументом можно указать список (через запятую)
так называемых классовых опций, т.е. дополнительных особенностей оформления.
Например, если мы хотим, чтобы книга набиралась шрифтом кегля 12 вместо кегля 10,
принятого по умолчанию, и притом в две колонки, мы должны начать файл командой
\documentclass[12pt,twocolumn]{book}

Наряду с классовыми опциями в LaTeX’е используются и так называемые стилевые пакеты.
После команды \documentclass, начинающей файл, может следовать команда \usepackage,
в аргументе которой стоит (через запятую) список подключаемых этой командой стилевых пакетов.
Например, первые две строки файла могут быть такими:
\documentclass[12pt,twocolumn]{book}
\usepackage{amsfonts,longtable}

Необязательных аргументов может быть предусмотрено несколько;
иногда они должны располагаться до обязательных, иногда после.
В любом случае порядок, в котором должны идти аргументы команды, надо строго соблюдать.
Между скобками, в которые заключены обязательные аргументы,
могут быть пробелы, но не должно быть пустых строк.

1.6) Окружения

Окружение это фрагмент текста, имеющий следующий вид
\begin{имя_окружения}
...
\end{имя_окружения}

Например,
\begin{center}
Все строки этого абзаца будут
центрированы; переносов не будет,
если только какое-то слово,
как в дезоксирибонуклеиновой
кислоте, не длинней строки.
\end{center}

Важным свойством окружений является то, что они действуют и как фигурные скобки:
часть файла, находящаяся внутри окружения, образует группу.
Например, внутри окружения center в вышеприведенном примере можно было бы сменить шрифт,
скажем, командой \itshape, и при этом после команды \end{center} восстановился бы тот шрифт,
что был перед окружением.

1.7) Звездочка после имени команды

В LaTeX’е некоторые команды и окружения имеют варианты, в которых
непосредственно после имени команды или окружения ставится звездочка *.
Например, команда \section означает "начать новый раздел документа",
а команда \section* означает "начать новый раздел документа, не нумеруя его".

1.8) Параметры

Наряду с текущим шрифтом, о котором уже шла речь,
TeX в каждый момент обработки исходного текста учитывает значения различных параметров,
таких, как величина абзацного отступа, ширина и высота страницы.

Параметры TeX’а обозначаются аналогично командам.

Например, \parindent обозначает в TeX’е величину абзацного отступа;
если нам понадобилось, чтобы абзацный отступ равнялся двум сантиметрам, можно написать так:
\parindent=2cm

1.9) Автоматическая генерация ссылок

Обязательно мойте руки\label{wash} перед едой, чтобы не заболеть.
Как известно (см. с.~\pageref{wash}), руки надо мыть.

2. Набор формул

2.1) Основы

Различают математические формулы внутри текста
и "выключные"(выделенные в отдельную строку).

Формулы внутри текста окружаются знаками $ с обеих сторон.
Выключеные формулы окружаются парами знаков доллара $$ с обеих сторон.

Пробелы внутри исходного текста, задающего формулу, игнорируются
(но по-прежнему надо ставить пробелы, обозначающие конец команды):
TeX расставляет пробелы в математических формулах автоматически
(например, знак равенства окружается небольшими пробелами).

Каждая буква в формуле рассматривается как имя переменной
и набирается шрифтом "математический курсив".

Часть файла, составляющая математическую формулу, образует группу.

2.2) Степени и индексы

Степени и индексы набираются с помощью знаков ^ и _ соответственно.

Если индекс или показатель степени -- выражение,
состоящее более чем из одного символа, то его надо взять в фигурные скобки.

3. Создание новых команд

Новые команды обычно называют макросами или макроопределениями.

3.1) Команды без аргументов

Для создания макросов используется команда \newcommand.
Эта команда имеет два обязательных аргумента. Первый из них — имя макроса.
Имена макросов должны подчиняться тем же правилам, что имена TeX’овских команд:
либо backslash и после него одна не-буква, либо backslash и после него — последовательность букв. 

Второй обязательный аргумент команды \newcommand, называемый "замещающим текстом",
сообщает TeX’у смысл макроса: на этот текст ваш макрос будет замещаться в процессе трансляции.

Если команда \newcommand дана внутри группы,
то смысл определяемой ею новой команды будет забыт TeX’ом по выходе из группы.
Если новая команда определяется в преамбуле, то, естественно,
она будет понятна TeX’у на протяжении всего документа.

Допустим нам часто нужен значок "равенство по определению".
Чтобы его вывести используюется такая последовательность команд:
\stackrel{\mathrm{def}}{=}
Чтобы не набирать это каждый раз, можно определить команду:
\newcommand{\eqdef}{\stackrel{\mathrm{def}}{=}}
И теперь везде можно использовать эту команду, например
x \cdot x \eqdef x^2

Если нужно, чтобы команду можно было использовать
как внутри формул, так и в тексте, тогда стоит обернуть макрос в \ensuremath, например
\newcommand{\Pn}{\ensuremath{\mathbf{P}^n}}

Теперь можно написать
Пусть \Pn~--- $n$-мерное проективное пространство,
а $X\subset \Pn$~--- неприводимое многообразие...

Команда \ensuremath всегда обрабатывает свой аргумент как
математическую формулу, независимо от того, в тексте или в формуле
вы ее используете.

Команда \renewcommand позволяет переопределить существующую команду.

3.2) Команды с аргументами

\newcommand{\имя-команды}[количество-аргументов]{замещающий текст}
Количество аргументов не может быть более 9.
В "замещающем тексте" места, на которые при развертывании
макроса будут подставляться аргументы, обозначаются символами #1
для первого аргумента, #2 для второго аргумента и т.д.
Использование команды: \имя-команды{аргумент-1}{аргумент-2}...

Пример команды
\newcommand{\smb}[2]{\left(\frac{#1}{#2}\right)}

Пример использования
\smb{a+b}{c}

3.3) \newcommand*

Команды \newcommand* и \renewcommand* работают точно так же,
как их тезки без звездочек, со следующим отличием:
если команда с аргументами определена с помощью \newcommand* или \renewcommand*,
то в ее аргументе не может содержаться пустая строка(которая разделяет абзацы) или команда \par.

При этом на содержимое самого "замещающего текста"
(второго обязательного аргумента \newcommand*)
никаких дополнительных запретов не накладывается.

Смысл запрета достаточно прост.
В большинстве команд не нужна возможность подставлять
в аргумент текст с пустой строкой или командой \par.
Но при этом сильно облегчается диагностика ошибок,
если например была забыта закрывающая фигурная скобка.
В таком случае TeX дочитает абзац до конца и остановится,
при использовании команды без звездочки TeX читал бы текст и дальше,
думая что возможно аргумент команды состоит из нескольких абзацев,
после которых есть закрываюшая фигурная скобка.

Рекомендуется использовать \newcommand* и \renewcommand* в большинстве случаев,
а \newcommand и \renewcommand использовать только тогда, когда действительно
нужна возможность подстановки в аргумент команды текста с пустой строкой или командой \par.

3.4) Счётчики

\newcounter{abcd}                 % создание счётчика (изначально значение 0)
\setcounter{abcd}{123}            % присвоение значения счётчику
\addtocounter{abcd}{1}            % добавление числа (1 в данном случае)
\setcounter{abcd}{\value{efgh}}   % команда \value позволяет ссылаться
                                    на значение другого счётчика
\arabic                           % вывод значения счётчика арабскими цифрами
\Roman                            % вывод значения счётчика римскими цифрами
\alph                             % вывод соответствующей буквы латинского алфавита
\fnsymbol                         % напечатать один из девяти символов,
                                    используемых иногда в англоязычных странах
                                    для обозначения последовательных сносок
Пример команды и счётчика

\newcounter{exerciseCnt}
\newcommand{\exercise}
{
    \addtocounter{exerciseCnt}{1}
    \par\noindent
    \textbf{Упражнение \arabic{exerciseCnt}. }
}

3.5) Подчиненные счётчики

\newcounter{имя-счётчика}[имя главного счётчика]
При изменении главного счётчика, зависимый счётчик обнуляется.

Пример

\newcounter{exerciseCnt}[section]
\newcommand{\exercise}
{
    \addtocounter{exerciseCnt}{1}
    \par\noindent
    \textbf{Упражнение \arabic{section}.\arabic{exerciseCnt} }
}

Для изменения главного счётчика нужно использовать \refstepcounter{счётчик},
эта команда обнулит зависимые счётчики в отличии от \addtocounter.
